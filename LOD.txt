
static LOD, 
dynamic LOD,


discrete LOD
    There is no way to support a smooth transition between LOD levels at this level, although alpha blending or morphing can be used to avoid visual poppopping

continuous  LOD



Topology keeping algorithm: 
    Manifold, realistic
non-topology keeping algorithm
    large amount reduced, looks differently

Point Cloud VS Mesh


    polygon mesh processing
Level of detail for 3D graphics

Vertex Clustering, Computing a representative:
    Average/Median vertex position
    Error quadrics(Preserve topology)

Iterative Decimation



Vertex clustering
    fast but difficult to control simplified mesh 
    topology changes, non-manifold meshes
    global error bound, but often not close to optimum
Iterative decimation with quadric error metrics
    good trade-off between mesh-quality and speed 
    explicit control over mesh topology
    restricting normal deviation improves mesh quality
    
OpenMesh:
    1. Block vertices from beeing touched by the decimater
    2. Various mesh decimation module + error quadratic decimation
    3. Mesh subdivision module
    4. View Dependent progressive meshes
    https://www.graphics.rwth-aachen.de:9000/OpenMesh/OpenMesh
    http://www.openmesh.org
QSlim

Remeshing: Mesh” → “remesh” → “pliant” →
    [Optional] flag border as feature
    [Optional] flag sharp edges as feature (dihedral angle) 
    [Optional] estimate edge size (bounding box divisions) remesh (target edge length)
    MeshLab

After reduction, display side by side

Repaire, welding consists of mergng vertices that are closer than a certain distance from each other

Polgon Cruncher: realtime preview

Polygon Optimization
    1. Quality
    2. Scalability
    3. Control
    4. Flexibility
    5. Can it keep the UV texture as well as normal, color etc?

Remeshing
Occlusion Culling 
Draw-Call Reduction
    

Polygon Cruncher
    Command Line Tool to automate the tasks without human involvement
    Progressive optimization 
    Clean up, merge mesh, split mesh

Instant Meshes
    fewer quads
    remesh quads

Simmplygon
    1. fewer triangles
    2. LESS OBJECTS
    3. Combining and creating new textures  
    4. Optimizing animation

FPLBase: Low level game library

Filament + IMGUI

MeshDecimation using VTK
VCG library beind MeshLab, http://github.com/cnr-isti-vclab/vcglib/
CGAL library
Quad Mesh Simplification
Localized Quadrilateral Coarsening
Fast-Quadric-Mesh-Simplification
Seam Aware Decimater, 2017, SIGGRAPH Asia 2017
User-Guided simplification
基于加权二次误差测量的边折叠简化算法
虚拟现实中LOD关键技术研究及实现, 边折叠算法
空间四边形网格简化及优化算法的设计与实现
保持视觉外观特征的网格简化 百度文库

Simplifying sufaces with color and texture using quadric error metrics


A New Cross-Platform Software for Quality Evaluation of Seismic Acquisition Data,  MVc

Bit Depths, Banding and Normals Mapping
https://polycount.com/discussion/148303/of-bit-depths-banding-and-normal-map

Tangent Normal Map Algorithm
https://puppet-master.net/blog/docs/matiere-3d/advanced-topics/
Two common problems on baking normals
    The smooth groups
    the round corner problem or double cornered problem without using cage
https://www.youtube.com/watch?v=kGszEIT4Kww

Normal map detial skewing:
    https://www.artstation.com/typhen/blog/BDr6/this-is-normal-2-baking-normal-maps
https://polycount.com/discussion/81154/understanding-averaged-normals-and-ray-projection-who-put-waviness-in-my-normal-map/p1

Bent Normal:
    1. Direct bake
    2. SSAO post process
    3. One of the biggest impacts Bent normals tend to have is to reduce the amount of light leaking that happends after a light build
    4. Bent normals can also be used with Ambient Occlusion(AO) to improve Diffuse indirect lighting. IT does this by makeing the diffuse indirect light closer to match Global Illuminiation(GI) by using the Bent normals for indirect lighting instead of the Normals.
    
https://polycount.com/discussion/198363/recommended-software-for-baking-normals-ambient-occlusion-maps
    There are various implementations of tangent space normal mapping in different applications and games engines. To make sure that your assets shaders correctly, remember to bake your normal map with the same tangent space that your renderer uses. If you're not sure which tangent space to use, Mikk/XNormal is a good choice, as that is what Unity, the Unreal engine and a variety of other applications use"

http://wiki.polycount.com/wiki/Normal_Map_Technical_Details
    Common Swizzle Coordinates: Right handedness, which coincides with OpenGL is indicated with a plus sign(eg. +Y), whereas Left handedness, which conincides with DirectX, is indictated with a negative sign(ex, -Y)
